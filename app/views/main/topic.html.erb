<% provide(:in_topic, true) -%>
<% provide(:topic_name, @topic ? @topic.name : "Uncategorized") -%>
<% provide(:indicators, @indicators) -%>
<div class=stream id=stream>
    <div class=post_list id=stream_post_list>
    <% for p in @posts -%>
        <%= render 'post/view', post: p, pinned: false %>
    <% end -%>
    </div>
    <div class=error_message id=error_message></div>
    <div class=new_post_form id=stream_post_form>
    <%= form_tag('/post/new') do -%>
        <textarea name=content tabindex=1 id=new_post_content autofocus></textarea>
        <button type=submit tabindex=2 id=new_post_submit>Post</button>
        <% if @topic -%>
            <input type=hidden name=topic value="<%= @topic.id %>"/>
        <% end -%>
    <% end -%>
    </div>
    <br>
</div>
<div class=pinned_posts>
    <div class=post_list id=pinned_post_list>
    <% for p in @pinned -%>
        <%= render 'post/view', post: p, pinned: true %>
    <% end -%>
    </div>
</div>
<script>
    var stream = document.getElementById('stream');
    var stream_post_list = document.getElementById('stream_post_list');
    var pinned_post_list = document.getElementById('pinned_post_list');
    var error_message = document.getElementById('error_message');

    function scroll_stream () {
        stream.scrollTop = stream.scrollHeight;
    }
    scroll_stream();

    var update_delay = 4000;
    var latest = <%= Post.last ? Post.last.id : 0 %>;

    function handle_update () {
        if (this.readyState == this.DONE) {
            if (this.status == 200) {
                if (this.responseXML != null) {
                    html = this.responseXML;
                    var new_posts = html.getElementById("new_posts");
                    if (new_posts == null) {
                        make_error("There was an error when loading new posts:\nThe server didn't include new_posts");
                        return;
                    }
                    new_latest = html.getElementById("new_latest");
                    if (new_latest != null) latest = parseInt(new_latest.textContent);
                    var wants_scroll = (stream.scrollTop > stream.scrollHeight - stream.offsetHeight - 120);
                    var added_posts = false;
                    while (new_posts.firstChild != null) {
                        post = new_posts.firstChild;
                        if (post.nodeType == post.ELEMENT_NODE) {
                            added_posts = true;
                            var event_match = post.className.match(/(\s|^)this_(.*)_(.*)(\s|$)/);
                            make_error(event_match);
                            if (event_match) {
                                if (event_match[2] == "pins") {
                                    var pinned = document.getElementById("post_" + event_match[3]);
                                    if (pinned) {
                                        pinned.className += " pinned";
                                        pinned_pinned = pinned.cloneNode();
                                        pinned_pinned.id = "pinned_" + event_match[3];
                                        pinned_post_list.appendChild(pinned_pinned);
                                    }
                                }
                                else if (event_match[2] == "unpins") {
                                    var pinned_unpinned = document.getElementById("pinned_" + event_match[3]);
                                    if (pinned_unpinned) {
                                        pinned_post_list.removeChild(pinned_unpinned);
                                    }
                                    var unpinned = document.getElementById("post_" + event_match[3]);
                                    if (unpinned) {
                                        unpinned.className = unpinned.className.replace(/(\s|^)pinned(\s|$)/, ' ');
                                    }
                                }
                                else if (event_match[2] == "yells") {
                                    var yelled = document.getElementById("post_" + event_match[3]);
                                    if (yelled) yelled.className += " yelled";
                                    var pinned_yelled = document.getElementById("pinned_" + event_match[3]);
                                    if (pinned_yelled) pinned_yelled.className += " yelled";
                                }
                                else if (event_match[2] == "unyells") {
                                    var unyelled = document.getElementById("post_" + event_match[3]);
                                    if (unyelled)
                                        unyelled.className = unyelled.className.replace(/(\s|^)yelled(\s|$)/, ' ');
                                    var pinned_unyelled = document.getElementById("pinned_" + event_match[3]);
                                    if (pinned_unyelled)
                                        pinned_unyelled.className = pinned_unyelled.className.replace(/(\s|^)yelled(\s|$)/, ' ');
                                }
                            }
                        }
                        stream_post_list.appendChild(post);
                    }
                    if (added_posts) update_delay = 4000;
                    else if (update_delay < 32000) update_delay += 4000;
                    setTimeout( "request_update()", update_delay );
                    if (wants_scroll && added_posts) scroll_stream();
                    var new_indicators = html.getElementById("new_indicators");
                    if (new_indicators) {
                        var inds = new_indicators.textContent.match(/\S+/g);
                        if (inds) {
                            for (var i = 0; i < inds.length; i++) {
                                var tab = document.getElementById("indicator_" + inds[i]);
                                if (tab) tab.className += ' activity';
                            }
                        }
                    }
                }
                else {
                    make_error("There was an error when loading new posts:\nThe server didn't response with valid XML");
                    return;
                }
            }
            else if (this.status != 0) {
                make_error("There was an error when loading new posts:\nThe server returned " + this.status);
                return;
            }
        }
    }
    function make_error (mess) {
        error_message.textContent = mess;
        var wants_scroll = (stream.scrollTop > stream.scrollHeight - stream.offsetHeight - 120);
        if (wants_scroll) scroll_stream();
    }
    function request_update () {
        var client = new XMLHttpRequest();
        client.onreadystatechange = handle_update;
        <% if @topic -%>
        client.open("GET", "/main/update.xml?topic=<%= @topic.id %>&since=" + latest);
        <% else -%>
        client.open("GET", "/main/update.xml?since=" + latest);
        <% end -%>
        client.send();
    }
    setTimeout( "request_update()", update_delay );
</script>
